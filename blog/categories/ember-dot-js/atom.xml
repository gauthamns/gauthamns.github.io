<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | My Stuff!!]]></title>
  <link href="http://gauthamns.github.io/blog/categories/ember-dot-js/atom.xml" rel="self"/>
  <link href="http://gauthamns.github.io/"/>
  <updated>2013-09-04T12:30:26+05:30</updated>
  <id>http://gauthamns.github.io/</id>
  <author>
    <name><![CDATA[Gautham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic class names in Ember]]></title>
    <link href="http://gauthamns.github.io/blog/2013/09/04/dynamic-class-names-in-ember/"/>
    <updated>2013-09-04T11:13:00+05:30</updated>
    <id>http://gauthamns.github.io/blog/2013/09/04/dynamic-class-names-in-ember</id>
    <content type="html"><![CDATA[<p>One of the strong points of ember is binding. It is so easy to update values without having to write observers and doing ugly stuff on DOM (I won&rsquo;t pretend I know much about Javascript).</p>

<p>As I&rsquo;m rewriting my website Fanzy.in in Ember, I&rsquo;m facing lot of minor issues which tell me either Ember has a steep learning curve, or docs aren&rsquo;t good enough (both are not good).</p>

<p>While displaying player&rsquo;s scores in Fanzy, players in the gamer&rsquo;s(Gamers are users who are playing Fanzy) team should be highlighted, along with special highlighting of captain and vice captain. So my html is like this:</p>

<p>``` html</p>

<p><table class="table table-bordered"></p>

<pre><code>&lt;tr&gt;
    &lt;td&gt;James Anderson&lt;/td&gt;
    &lt;td&gt;Points: 251&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="info"&gt;
    &lt;td&gt;Peter Siddle&lt;/td&gt;
    &lt;td&gt;Points: 146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="success"&gt;
    &lt;td&gt;Ashton Agar&lt;/td&gt;
    &lt;td&gt;Points: 251&lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>```</p>

<p>James Anderson is not in the gamer&rsquo;s team. Peter Siddle is in the team and hence <code>class="info"</code>. Ashton Agar is either captain or vice captain and is shown by <code>class="success"</code></p>

<p>Surprisingly, doing this turned out to be hard in Ember. (Because I just started and couldn&rsquo;t find how to do it) and finally used a custom view to acheive this.</p>

<p>``` coffeescript
Fansy.ScheduledMatch = Fansy.Model.extend</p>

<pre><code>matchPlayerScores: DS.hasMany("App.MatchPlayerScore")
matchPlayerSelection: DS.belongsTo("App.MatchPlayerSelection")
</code></pre>

<p>Fansy.MatchPlayerSelection = Fansy.Model.extend</p>

<pre><code>matchPlayerScores: DS.hasMany("App.MatchPlayerScore")
captainId: DS.attr("number")
viceCaptainId: DS.attr('number')
</code></pre>

<p>Fansy.MatchPlayerScore = Fansy.Model.extend</p>

<pre><code>totalPoints: DS.attr('number')
name: DS.attr('name')
matchPlayerSelection: DS.belongsTo('App.MatchPlayerSelection')
scheduledMatch: DS.belongsTo('App.ScheduledMatch')
</code></pre>

<p>```</p>

<p>Every match is modeled as <code>ScheduledMatch</code> and players scores as <code>MatchPlayerScore</code>. <code>MatchPlayerSelection</code> represents the team of the current logged in gamer.
So ScheduledMatch might have around 30 players(MatchPlayerScore) but MatchPlayerSelection will exactly have 11 players(that is how many a gamer is allowed to select in his team.)</p>

<p>Captain and vice captain are just ids for simplicity. Code is below:</p>

<p>Template code:
<div>
  <pre><code class='html'>&lt;table class=&quot;table table-bordered&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{#each matchPlayerScore in matchPlayerScores}}
    {{#view Fansy.MpsTrView mpsIdBinding=&quot;matchPlayerScore.id&quot; matchPlayerSelectionBinding=&quot;matchPlayerSelection&quot;}}
        &amp;lt;td&amp;gt;{{matchPlayerScore.name}}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;{{matchPlayerScore.totalPoints}}&amp;lt;/td&amp;gt;
    {{/view}}
{{/each}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/table&gt;</code></pre>
</div>
</p>

<p>Custom View:
``` coffeescript
Fansy.MpsTrView = Em.View.extend
  mpsId: null
  matchPlayerSelection: null
  tagName: &lsquo;tr&rsquo;
  classNameBindings: [&lsquo;selectionClass&rsquo;]</p>

<p>  selectionClass: (&ndash;></p>

<pre><code>mpsId = parseInt(this.get('mpsId'))
matchPlayerSelection = this.get('matchPlayerSelection')
selectionScores = matchPlayerSelection.get('matchPlayerScores.content')
if mpsId == matchPlayerSelection.get('captainId')
  return "success"
else if mpsId == matchPlayerSelection.get('viceCaptainId')
  return "success"
else
  for selectionScore in selectionScores
    if parseInt(selectionScore.id) == mpsId
      return "info"
  return null
</code></pre>

<p>  ).property(&lsquo;mpsId&rsquo;, &lsquo;matchPlayerSelection&rsquo;)
```</p>

<p>We write our own custom view <code>Fansy.MpsTrView</code> which will render each <code>MatchPlayerScore</code>. The view will have the <tr> tag <code>tagName: 'tr'</code>. Also, we bind className to <code>selectionClass</code> function. So in the selection class function, we return <code>"info"</code> or <code>"success"</code> as appropriate.</p>

<p>The view will render the handlebars block within  {{#view}} {{/view}}  and we provide our table columns there. Since we have declared <tr> tag, handlebars block will be surrounded with <tr></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excited for Barcamp Ember.js talk and Rails meetup group]]></title>
    <link href="http://gauthamns.github.io/blog/2013/08/30/excited-for-barcamp-ember-dot-js-talk-and-rails-meetup-group/"/>
    <updated>2013-08-30T09:41:00+05:30</updated>
    <id>http://gauthamns.github.io/blog/2013/08/30/excited-for-barcamp-ember-dot-js-talk-and-rails-meetup-group</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pretty excited and happy about my open source initiatives for this month.</p>

<p>I was surprised that there is no Rails meetup in Bangalore. Rails is exciting!! More I use Rails, more I fall in love. A very well thought framework indeed. So I just went ahead and created one. I hope the community drives it forward.</p>

<p>More I use Ember.js, more I&rsquo;m convinced of the potential of Javascript MVC frameworks. While Ember is still not a finished product (lots of polishing is required. And can do with good docs too.) I&rsquo;m giving a session on Ember in Barcamp Bangalore on Sept 14th.</p>

<p>Do join Rails Meetup: <a href="http://www.meetup.com/Bangalore-Ruby-on-Rails-Enthusiasts/">http://www.meetup.com/Bangalore-Ruby-on-Rails-Enthusiasts/</a></p>

<p>Barcamp session: (I wanna Attend!!) <a href="http://barcampbangalore.org/bcb/bcb14/ember-js-a-framework-for-creating-ambitious-web-applications">http://barcampbangalore.org/bcb/bcb14/ember-js-a-framework-for-creating-ambitious-web-applications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A look at Ember Data]]></title>
    <link href="http://gauthamns.github.io/blog/2013/08/28/a-look-at-ember-data/"/>
    <updated>2013-08-28T08:38:00+05:30</updated>
    <id>http://gauthamns.github.io/blog/2013/08/28/a-look-at-ember-data</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning Ember.js to use it for Fansy.in website and it has been a wonderful experience so far.</p>

<p>Why client side MVC?
Better user experience. A game like Fantasy Cricket has to have a dynamic website to keep the gamers interested. And as I understand, Javascript MVC&rsquo;s make it very easy to build dynamic web apps.</p>

<p>I chose Ember because I want to integrate Discourse to Fansy.in (still a few months away!!) so choosing Ember was an obvious choice. I&rsquo;m loving the framework and the benefits look obvious. There is discourse project to look for some inspiration.</p>

<p>But Ember-Data!! while ember-data looks cool from the outside, it is still raw and too restrictive to fit to anyone&rsquo;s needs (according to me atleast.). Today&rsquo;s websites are complicated and cannot fit into one model per page category.</p>

<p>For example, in Fansy.in, Tournaments have Matches and Tournament user rankings. It is expensive and unnecessary to load all the ids of the hasMany relationships when loading tournaments in the tournaments page where we do not need them.
And then, when we go to a Tournament&rsquo;s page where we will need Matches and User&rsquo;s rankings, two requests are made to fetch the relationships and increases with the number of relationships for a model.</p>

<p>I&rsquo;ve been thinking about how to handle it so that the number of json requests do not shoot up and also we are fetching only the data we need. My thought process as of now:</p>

<ol>
<li>From the server, Send all the data required for displaying the particular page.</li>
<li>For relationships, side load relationships and never send only ids. (This will make sure extra calls are not made for fetching the those objects later. Yes it is expensive to send all the data. Will handle it in the next step.)</li>
<li>Send only the data required for displaying the particular page. If matches are not required while showing list of tournaments, do not send down the ids of the matches too. (This will break the ember-data loading part but will handle it in the next step.)</li>
<li>In the setupController, reload the model if loaded already. This way, we will make sure that the model is reloaded and the server will send all the request necessary to show the particular page.</li>
</ol>


<p>``` coffeescript</p>

<pre><code>setupController: (controller, model) -&gt;
    if model.get('isLoaded')
        model.reload()
    controller.set('model', model)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
